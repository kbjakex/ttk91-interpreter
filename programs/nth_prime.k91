
; Generic test

; Very naively computes and prints the first NumPrimes prime numbers.

NumPrimes EQU 1000

IPParamX EQU -2
IPRetVal EQU -3

Main    LOAD R1, =1         ; Hardcode first 3 primes
        OUT R1, =CRT
        LOAD R1, =2
        OUT R1, =CRT

        LOAD R1, =1         ; Number x to be tested
        LOAD R2, =2         ; Number of primes found

MLoop   ADD R1, =2          ; x += 2 (skips even numbers)
        PUSH SP, =0
        PUSH SP, R1
        CALL IsPrime
        POP SP, R3

        JZER R3, MLoop      ; If IsPrime(x) == 0 (not prime), goto Loop
        OUT R1, =CRT        ; Was prime, print it
        
        ADD R2, R3          ; Number of primes found += IsPrime(x)
        COMP R2, =NumPrimes
        JLES MLoop           ; If x < NumPrimes, goto Loop
        SVC SP, =HALT       ; NumPrimes primes found, terminate


; IsPrime(x) -> 1 if prime(x), else 0

IsPrime PUSHR SP

        LOAD R1, =3         ; Loop variable 'i'
        LOAD R2, IPParamX(FP) ; Parameter x

IPLoop  LOAD R3, R2
        MOD R3, R1
        JZER R3, IPFail     ; if x % i == 0, goto IPFail, because not prime

        ADD R1, =2          ; i += 2

        LOAD R3, R1
        MUL R3, R3          ; r3 = i*i
        COMP R3, R2
        JNGRE IPLoop        ; if i*i <= x, goto IPLoop

        LOAD R1, =1         ; Must be prime if you get here.
        STORE R1, IPRetVal(FP) ; Return 1

        POPR SP
        EXIT SP, =1

IPFail  LOAD R1, =0
        STORE R1, IPRetVal(FP)

        POPR SP
        EXIT SP, =1